import { diffWords } from 'diff';

import { countWordsFromHtml } from './word-utils';

export interface Patch {
  op: '+' | '-';
  at: number;
  val: string;
}

/**
 * Represents the difference between two texts with only the changes stored
 */
export interface TextDiff {
  patches: Patch[];
  stats: {
    diffWordCount: number;
  };
}

/**
 * Generates a diff between old and new text content
 * @param oldText The original text
 * @param newText The modified text
 * @returns A TextDiff containing only the changes needed to transform oldText into newText
 */
export function generateTextDiff(oldText: string, newText: string): TextDiff {
  if (oldText === newText) {
    return {
      patches: [],
      stats: {
        diffWordCount: 0,
      },
    };
  }

  const changes = diffWords(oldText, newText);
  const patches: Patch[] = [];
  let currentIndex = 0;

  for (const change of changes) {
    if (change.added) {
      patches.push({
        op: '+',
        at: currentIndex,
        val: change.value,
      });
    } else if (change.removed) {
      patches.push({
        op: '-',
        at: currentIndex,
        val: change.value,
      });
      // Only move index for removed text, not for added
      currentIndex += change.value.length;
    } else if (change.value) {
      // For unchanged text, just move the index forward
      currentIndex += change.value.length;
    }
  }

  return {
    patches,
    stats: {
      diffWordCount: countWordsFromHtml(newText) - countWordsFromHtml(oldText),
    },
  };
}

/**
 * Applies a diff to an old text to get the new text
 * @param oldText The original text
 * @param diff The TextDiff generated by generateTextDiff
 * @returns The new text after applying the diff
 */
export function applyTextDiff(oldText: string, diff: TextDiff): string {
  if (!diff.patches || diff.patches.length === 0) {
    return oldText; // No changes
  }

  try {
    // Start with the original text
    const result = oldText.split('');
    let offset = 0;

    // Sort patches by index in reverse order to handle multiple patches correctly
    const sortedPatches = [...diff.patches].sort((a, b) => a.at - b.at);

    for (const patch of sortedPatches) {
      const adjustedIndex = patch.at + offset;

      switch (patch.op) {
        case '+':
          // Insert the new text at the specified index
          result.splice(adjustedIndex, 0, ...patch.val);
          offset += patch.val.length;
          break;

        case '-': {
          const length = patch.val.length;
          // Remove the specified number of characters
          result.splice(adjustedIndex, length);
          offset -= length;
          break;
        }

        // 'keep' patches don't modify the text
      }
    }

    return result.join('');
  } catch (error) {
    console.error('Failed to apply diff:', error);
    throw error;
  }
}
